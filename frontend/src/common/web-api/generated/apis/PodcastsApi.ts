/* tslint:disable */
/* eslint-disable */
/**
 * Uncast Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomFilePodcast,
    CustomFilePodcastFromJSON,
    CustomFilePodcastToJSON,
    CustomPodcastBase,
    CustomPodcastBaseFromJSON,
    CustomPodcastBaseToJSON,
    CustomRssPodcast,
    CustomRssPodcastFromJSON,
    CustomRssPodcastToJSON,
    CustomYouTubePodcast,
    CustomYouTubePodcastFromJSON,
    CustomYouTubePodcastToJSON,
    LibraryPodcastBase,
    LibraryPodcastBaseFromJSON,
    LibraryPodcastBaseToJSON,
    LibraryRssPodcast,
    LibraryRssPodcastFromJSON,
    LibraryRssPodcastToJSON,
    LibraryYouTubePodcast,
    LibraryYouTubePodcastFromJSON,
    LibraryYouTubePodcastToJSON,
    PodcastBase,
    PodcastBaseFromJSON,
    PodcastBaseToJSON,
} from '../models';

export interface CreateLibraryRssPodcastRequest {
    libraryRssPodcast?: LibraryRssPodcast;
}

export interface CreateLibraryYouTubePodcastRequest {
    libraryYouTubePodcast?: LibraryYouTubePodcast;
}

export interface FindLibraryRssPodcastByIdRequest {
    id: string;
}

export interface FindPodcastByIdRequest {
    id: string;
}

export interface UpdateLibraryRssPodcastRequest {
    libraryRssPodcast?: LibraryRssPodcast;
}

export interface UpdateLibraryYouTubePodcastRequest {
    libraryYouTubePodcast?: LibraryYouTubePodcast;
}

/**
 * no description
 */
export class PodcastsApi extends runtime.BaseAPI {

    /**
     */
    async createLibraryRssPodcastRaw(requestParameters: CreateLibraryRssPodcastRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/Podcasts/Library/Rss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryRssPodcastToJSON(requestParameters.libraryRssPodcast),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async createLibraryRssPodcast(requestParameters: CreateLibraryRssPodcastRequest): Promise<string> {
        const response = await this.createLibraryRssPodcastRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createLibraryYouTubePodcastRaw(requestParameters: CreateLibraryYouTubePodcastRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/Podcasts/Library/YouTube`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryYouTubePodcastToJSON(requestParameters.libraryYouTubePodcast),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async createLibraryYouTubePodcast(requestParameters: CreateLibraryYouTubePodcastRequest): Promise<string> {
        const response = await this.createLibraryYouTubePodcastRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async findLibraryRssPodcastByIdRaw(requestParameters: FindLibraryRssPodcastByIdRequest): Promise<runtime.ApiResponse<PodcastBase>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findLibraryRssPodcastById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Library/Rss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastBaseFromJSON(jsonValue));
    }

    /**
     */
    async findLibraryRssPodcastById(requestParameters: FindLibraryRssPodcastByIdRequest): Promise<PodcastBase> {
        const response = await this.findLibraryRssPodcastByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async findPodcastByIdRaw(requestParameters: FindPodcastByIdRequest): Promise<runtime.ApiResponse<PodcastBase>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findPodcastById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PodcastBaseFromJSON(jsonValue));
    }

    /**
     */
    async findPodcastById(requestParameters: FindPodcastByIdRequest): Promise<PodcastBase> {
        const response = await this.findPodcastByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllCustomFilePodcastsRaw(): Promise<runtime.ApiResponse<Array<CustomFilePodcast>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Custom/File`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomFilePodcastFromJSON));
    }

    /**
     */
    async getAllCustomFilePodcasts(): Promise<Array<CustomFilePodcast>> {
        const response = await this.getAllCustomFilePodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllCustomPodcastsRaw(): Promise<runtime.ApiResponse<Array<CustomPodcastBase>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Custom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomPodcastBaseFromJSON));
    }

    /**
     */
    async getAllCustomPodcasts(): Promise<Array<CustomPodcastBase>> {
        const response = await this.getAllCustomPodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllCustomRssPodcastsRaw(): Promise<runtime.ApiResponse<Array<CustomRssPodcast>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Custom/Rss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomRssPodcastFromJSON));
    }

    /**
     */
    async getAllCustomRssPodcasts(): Promise<Array<CustomRssPodcast>> {
        const response = await this.getAllCustomRssPodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllCustomYouTubePodcastsRaw(): Promise<runtime.ApiResponse<Array<CustomYouTubePodcast>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Custom/YouTube`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomYouTubePodcastFromJSON));
    }

    /**
     */
    async getAllCustomYouTubePodcasts(): Promise<Array<CustomYouTubePodcast>> {
        const response = await this.getAllCustomYouTubePodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllLibraryPodcastsRaw(): Promise<runtime.ApiResponse<Array<LibraryPodcastBase>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Library`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LibraryPodcastBaseFromJSON));
    }

    /**
     */
    async getAllLibraryPodcasts(): Promise<Array<LibraryPodcastBase>> {
        const response = await this.getAllLibraryPodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllLibraryRssPodcastsRaw(): Promise<runtime.ApiResponse<Array<LibraryRssPodcast>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Library/Rss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LibraryRssPodcastFromJSON));
    }

    /**
     */
    async getAllLibraryRssPodcasts(): Promise<Array<LibraryRssPodcast>> {
        const response = await this.getAllLibraryRssPodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllLibraryYouTubePodcastsRaw(): Promise<runtime.ApiResponse<Array<LibraryYouTubePodcast>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts/Library/YouTube`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LibraryYouTubePodcastFromJSON));
    }

    /**
     */
    async getAllLibraryYouTubePodcasts(): Promise<Array<LibraryYouTubePodcast>> {
        const response = await this.getAllLibraryYouTubePodcastsRaw();
        return await response.value();
    }

    /**
     */
    async getAllPodcastsRaw(): Promise<runtime.ApiResponse<Array<PodcastBase>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/Podcasts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PodcastBaseFromJSON));
    }

    /**
     */
    async getAllPodcasts(): Promise<Array<PodcastBase>> {
        const response = await this.getAllPodcastsRaw();
        return await response.value();
    }

    /**
     */
    async updateLibraryRssPodcastRaw(requestParameters: UpdateLibraryRssPodcastRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/Podcasts/Library/Rss`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryRssPodcastToJSON(requestParameters.libraryRssPodcast),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateLibraryRssPodcast(requestParameters: UpdateLibraryRssPodcastRequest): Promise<void> {
        await this.updateLibraryRssPodcastRaw(requestParameters);
    }

    /**
     */
    async updateLibraryYouTubePodcastRaw(requestParameters: UpdateLibraryYouTubePodcastRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/Podcasts/Library/YouTube`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryYouTubePodcastToJSON(requestParameters.libraryYouTubePodcast),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateLibraryYouTubePodcast(requestParameters: UpdateLibraryYouTubePodcastRequest): Promise<void> {
        await this.updateLibraryYouTubePodcastRaw(requestParameters);
    }

}
