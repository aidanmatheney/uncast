/* tslint:disable */
/* eslint-disable */
/**
 * Uncast Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserAppState,
    UserAppStateFromJSON,
    UserAppStateToJSON,
    UserPodcastEpisodeState,
    UserPodcastEpisodeStateFromJSON,
    UserPodcastEpisodeStateToJSON,
    UserPodcastPlaybackQueue,
    UserPodcastPlaybackQueueFromJSON,
    UserPodcastPlaybackQueueToJSON,
    UserPodcastState,
    UserPodcastStateFromJSON,
    UserPodcastStateToJSON,
} from '../models';

export interface GetEpisodeStateRequest {
    episodeId: string;
}

export interface GetPodcastStateRequest {
    podcastId: string;
}

export interface UpdateAppStateRequest {
    userAppState?: UserAppState;
}

export interface UpdateEpisodeStateRequest {
    episodeId: string;
    userPodcastEpisodeState?: UserPodcastEpisodeState;
}

export interface UpdatePodcastStateRequest {
    podcastId: string;
    userPodcastState?: UserPodcastState;
}

export interface UpdateQueueRequest {
    userPodcastPlaybackQueue?: UserPodcastPlaybackQueue;
}

/**
 * no description
 */
export class UserStateApi extends runtime.BaseAPI {

    /**
     */
    async getAppStateRaw(): Promise<runtime.ApiResponse<UserAppState>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/UserState/App`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAppStateFromJSON(jsonValue));
    }

    /**
     */
    async getAppState(): Promise<UserAppState> {
        const response = await this.getAppStateRaw();
        return await response.value();
    }

    /**
     */
    async getEpisodeStateRaw(requestParameters: GetEpisodeStateRequest): Promise<runtime.ApiResponse<UserPodcastEpisodeState>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling getEpisodeState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/UserState/Episodes/{episodeId}`.replace(`{${"episodeId"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPodcastEpisodeStateFromJSON(jsonValue));
    }

    /**
     */
    async getEpisodeState(requestParameters: GetEpisodeStateRequest): Promise<UserPodcastEpisodeState> {
        const response = await this.getEpisodeStateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPodcastStateRaw(requestParameters: GetPodcastStateRequest): Promise<runtime.ApiResponse<UserPodcastState>> {
        if (requestParameters.podcastId === null || requestParameters.podcastId === undefined) {
            throw new runtime.RequiredError('podcastId','Required parameter requestParameters.podcastId was null or undefined when calling getPodcastState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/UserState/Podcasts/{podcastId}`.replace(`{${"podcastId"}}`, encodeURIComponent(String(requestParameters.podcastId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPodcastStateFromJSON(jsonValue));
    }

    /**
     */
    async getPodcastState(requestParameters: GetPodcastStateRequest): Promise<UserPodcastState> {
        const response = await this.getPodcastStateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getQueueRaw(): Promise<runtime.ApiResponse<UserPodcastPlaybackQueue>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Api/UserState/Queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPodcastPlaybackQueueFromJSON(jsonValue));
    }

    /**
     */
    async getQueue(): Promise<UserPodcastPlaybackQueue> {
        const response = await this.getQueueRaw();
        return await response.value();
    }

    /**
     */
    async updateAppStateRaw(requestParameters: UpdateAppStateRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/UserState/App`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserAppStateToJSON(requestParameters.userAppState),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAppState(requestParameters: UpdateAppStateRequest): Promise<void> {
        await this.updateAppStateRaw(requestParameters);
    }

    /**
     */
    async updateEpisodeStateRaw(requestParameters: UpdateEpisodeStateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling updateEpisodeState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/UserState/Episodes/{episodeId}`.replace(`{${"episodeId"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserPodcastEpisodeStateToJSON(requestParameters.userPodcastEpisodeState),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateEpisodeState(requestParameters: UpdateEpisodeStateRequest): Promise<void> {
        await this.updateEpisodeStateRaw(requestParameters);
    }

    /**
     */
    async updatePodcastStateRaw(requestParameters: UpdatePodcastStateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.podcastId === null || requestParameters.podcastId === undefined) {
            throw new runtime.RequiredError('podcastId','Required parameter requestParameters.podcastId was null or undefined when calling updatePodcastState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/UserState/Podcasts/{podcastId}`.replace(`{${"podcastId"}}`, encodeURIComponent(String(requestParameters.podcastId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserPodcastStateToJSON(requestParameters.userPodcastState),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePodcastState(requestParameters: UpdatePodcastStateRequest): Promise<void> {
        await this.updatePodcastStateRaw(requestParameters);
    }

    /**
     */
    async updateQueueRaw(requestParameters: UpdateQueueRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Api/UserState/Queue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserPodcastPlaybackQueueToJSON(requestParameters.userPodcastPlaybackQueue),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateQueue(requestParameters: UpdateQueueRequest): Promise<void> {
        await this.updateQueueRaw(requestParameters);
    }

}
